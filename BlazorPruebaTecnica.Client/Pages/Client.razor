@page "/client"
@page "/client/{idClientEditar:guid}"

@using PruebaTecnicaShared;
@using BlazorPruebaTecnica.Client.services.Client;

@inject IClientService clientService;
@inject NavigationManager navegacion;

<h3 class="text-center mb-4">@titulo</h3>

<div class="card p-4 shadow-sm">
    <EditForm Model="client" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="form-group mb-3">
            <label class="form-label" for="name">Nombre</label>
            <InputText id="name" class="form-control" @bind-Value="client.name" placeholder="Ingresa el nombre del cliente"></InputText>
            <ValidationMessage For="@(() => client.name)" class="text-danger"></ValidationMessage>
        </div>

        <div class="form-group mb-3">
            <label class="form-label" for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="client.email" placeholder="Ingresa el correo electrónico"></InputText>
            <ValidationMessage For="@(() => client.email)" class="text-danger"></ValidationMessage>
        </div>

        <div class="form-group mb-3">
            <label class="form-label" for="phone">Teléfono</label>
            <InputText id="phone" class="form-control" @bind-Value="client.phone" placeholder="Ingresa el teléfono"></InputText>
            <ValidationMessage For="@(() => client.phone)" class="text-danger"></ValidationMessage>
        </div>

        <div class="d-flex justify-content-between">
            <button class="btn btn-success" type="submit">
                @btnTexto
            </button>

            <a class="btn btn-secondary" href="clients">Volver</a>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public Guid idClientEditar { get; set; } = Guid.Empty;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    ClientDTO client = new ClientDTO
        {
            name = string.Empty,
            email = string.Empty,
            phone = string.Empty
        };

    protected override async Task OnInitializedAsync()
    {
        if (idClientEditar != Guid.Empty)
        {
            client = await clientService.Search(idClientEditar);
            btnTexto = "Actualizar Cliente";
            titulo = "Editar Cliente";
        }
        else
        {
            btnTexto = "Guardar Cliente";
            titulo = "Nuevo Cliente";
        }
    }

    private async Task OnValidSubmit()
    {
        ClientDTO result;
        if (idClientEditar == Guid.Empty)
            result = await clientService.create(client);
        else
            result = await clientService.update(idClientEditar, client);

        if (result != null)
            navegacion.NavigateTo("/clients");
    }
}
