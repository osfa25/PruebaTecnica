@page "/register"
@using BlazorPruebaTecnica.Client.Services
@inject IAuthService authService
@inject NavigationManager navegacion

<h3 class="text-center mb-4">Registro</h3>

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card p-4 shadow-lg" style="width: 350px;">
        <EditForm Model="registerModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="form-group mb-3">
                <label class="form-label" for="username">Nombre de usuario</label>
                <InputText id="username" class="form-control" @bind-Value="registerModel.Username" placeholder="Nombre de usuario" />
                <ValidationMessage For="@(() => registerModel.Username)" class="text-danger"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
                <label class="form-label" for="password">Contraseña</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Contraseña" />
                <ValidationMessage For="@(() => registerModel.Password)" class="text-danger"></ValidationMessage>
            </div>

            <div class="form-group mb-3">
                <label class="form-label" for="confirmPassword">Confirmar contraseña</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirmar contraseña" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger"></ValidationMessage>
            </div>

            <button class="btn btn-primary w-100 mb-2" type="submit">Registrarse</button>

            
            <button class="btn btn-outline-secondary w-100" @onclick="RedirectToLogin">Volver al inicio de sesión</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();

    private async Task OnValidSubmit()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            
            Console.WriteLine("Las contraseñas no coinciden.");
            return;
        }

        var result = await authService.RegisterAsync(registerModel.Username, registerModel.Password);
        if (result)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            Console.WriteLine("Error en el registro.");
        }
    }

    private void RedirectToLogin()
    {
        navegacion.NavigateTo("/login");
    }

    public class RegisterModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}